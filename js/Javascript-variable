# variable

---

## 선언, 할당, 범위

- 선언 : `var name`
- 할당 : `name = 'kim';`
- 범위 : 변수에 접근할 수 있는 범위

## var

1. 재선언 가능

```js
var name = "kim";
var name = "park";
```

2. 재할당 가능

```js
var name = "kim";
name = "park";
```

3. 범위

```js
function 함수() {
  var name = "kim"; //function 안에서만 존재,함수밖에서 쓸 수 없다.
}
```

## let

1. 재선언 불가

```js
let name = "kim";
let name = "park"; //재선언 불가
```

2. 재할당 가능

```js
let name = "kim";
name = "park"; //재할당 가능
```

3. 범위

```js
if (true) {
  let name = "park"; //{}중괄호 안에 범위
}
```

## const

1. 재선언 불가

```js
const name = "kim";
const name = "park"; //재선언 불가
```

2. 재할당 불가

```js
const name = "kim";
name = "park"; //재할당 불가
```

3. const로 오브젝트를 만들었을 때

```js
const people = { name: "kim" };
사람.이름 = "park"; //변수 안에 있는 값을 바꾼것이지 재할당 한 것이 아니다.
```

```js
const people = { name: "kim" };
object.freeze(people); //해당 변수의 값을 바꾸지 못하도록 한다.
사람.이름 = "park";
```

4. 범위

```js
if (true) {
  const name = "park"; //{}중괄호 안에 범위
}
```

---

## 변수의 hoisting 현상

변수의 선언을 변수 범위 맨위로 끌고 오는 현상

```js
console.log(나이); //undifined
var 나이 = 30;
console.log(나이); //30
```

```js
var 나이;
console.log(나이); //undifined
나이 = 30;
console.log(나이); //30
```

- 위에 예시에서 쓰인 `var 나이 = 30;`에서 `var 나이`선언 부분을 범위 맨위로 올려서 읽힌다. 선언과 할당 부분이 불리되서 읽힘.

- 변수 동시에 여러개 만들기

```js
var 나이, 이름, 성별;

var 나이 = 20,
  이름 = "kim",
  성별;
```

- 전역 변수 : 모든 곳에서 쓸 수 있는 변수

```js
var 나이 = 20; //바깥

function 함수() {
  console.log(나이); //안
}

함수();
//바깥에서 쓰인 변수는 안에서 쓸 수 있다.
```

- 전역변수 만들기

```js
var 나이 = 20;
window.이름 = "kim";
```
